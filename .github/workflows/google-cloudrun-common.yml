name: Deploy to CloudRun

on:
  workflow_call:
    outputs:
      SERVICE_URL:
        description: "The CloudRun service URL"
        value: ${{ jobs.deploy.outputs.SERVICE_URL }}
    inputs:
      NEEDED:
        type: boolean
        default: true
      SERVICE:
        required: true
        type: string
      PROJECT_ID:
        required: true
        type: string
      ENV:
        required: true
        type: string
      MANDATOR:
        required: true
        type: string
      NUXT_PUBLIC_DIRECTUS_URL:
        required: true
        type: string
      NUXT_DIRECTUS_API_TOKEN:
        required: true
        type: string
      STRAPI_URL:
        required: true
        type: string
      CICD_GCLOUD_WORKLOAD_IDENTITY_PROVIDER:
        required: false
        type: string
      CICD_GCLOUD_SERVICE_ACCOUNT:
        required: false
        type: string
      NUXT_DEPLOYMENT_HASH:
        required: true
        type: string

env:
  REGION: europe-west3
  GAR_LOCATION: europe-west3
  REPOSITORY: ai-verticals

jobs:
  deploy:
    if: ${{ inputs.NEEDED == true }}
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: "read"
      id-token: "write"

    runs-on: ubuntu-latest
    outputs:
      SERVICE_URL: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: pnpm-install
        uses: pnpm/action-setup@v4
        with:
          version: 9.x

      - name: Build
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'

      - run: pnpm install --frozen-lockfile
      - run: |-
          pnpm run codegen
          pnpm run setup
          pnpm -F @ai-vertical/${{inputs.MANDATOR}} run build
        name: Build Nuxt Project
        env:
          NUXT_PUBLIC_DIRECTUS_URL: ${{ inputs.NUXT_DIRECTUS_API_TOKEN }}
          NUXT_DIRECTUS_API_TOKEN: ${{ inputs.NUXT_DIRECTUS_API_TOKEN }}
          STRAPI_URL: ${{ inputs.STRAPI_URL }}
          ENV: ${{ inputs.ENV}}
          MANDATOR: ${{inputs.MANDATOR}}
          NUXT_DEPLOYMENT_HASH: ${{ github.sha }}

      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@v1"
        with:
          workload_identity_provider: "${{ inputs.CICD_GCLOUD_WORKLOAD_IDENTITY_PROVIDER }}"
          service_account: "${{ inputs.CICD_GCLOUD_SERVICE_ACCOUNT }}"
          token_format: "access_token"

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        id: docker-auth
        uses: "docker/login-action@v2"
        with:
          username: "oauth2accesstoken"
          password: "${{ steps.auth.outputs.access_token }}"
          registry: "${{ env.GAR_LOCATION }}-docker.pkg.dev"

      - name: Docker Buildx Setup
        uses: docker/setup-buildx-action@v2

      - name: Build and Push Container
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ inputs.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ inputs.SERVICE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ inputs.SERVICE }}
          region: ${{ env.REGION }}
          env_vars: |
            NUXT_PUBLIC_DIRECTUS_URL: ${{ inputs.NUXT_DIRECTUS_API_TOKEN }}
            NUXT_DIRECTUS_API_TOKEN: ${{ inputs.NUXT_DIRECTUS_API_TOKEN }}
            STRAPI_URL: ${{ inputs.STRAPI_URL }}
            ENV: ${{ inputs.ENV}}
            MANDATOR: ${{inputs.MANDATOR}}
            NUXT_DEPLOYMENT_HASH: ${{ github.sha }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ inputs.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ inputs.SERVICE }}:${{ github.sha }}

      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
